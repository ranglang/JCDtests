1.在第一次获取元素失败时必须截图保存,以便之后的对比和排错. 有些错误会在几秒后消失
    解决方式:
        1. 文件存缓存 > 在确定test失败时再将其写入磁盘
        2. 直接写磁盘, 若最终test成功, 则删除文件
    采用:
        方式 2 > 使用UIAutomatior 的截图功能

2.获取元素的方式需更新 , 经测验:每个元素的查找(两重allOf查找) 花费10毫米 .
纵观整个测试 , 每个元素的重复查找次数基本会超过10次 ; 需要重复查找的元素基本不会超过500个 ;
按UI测试来说50秒的浪费基本可以忽略 .
    参数化的时候当另论了 , 不过这也很难超过500这个数 .
    改善方式:
        1. 删除多余的static变量 , 直接使用方法返回element
        2. 将element查找方式文件化 ,不过这种方式比较死板
    采用:
        方式 1

3.二次开发Junit4 的parameterized 以实现同class中调用不同的参数
    参考:
        http://stackoverflow.com/questions/1206257/parameters-in-junit-4
    解决方式:
        采用第三方库解决 : https://github.com/Pragmatists/junitparams/wiki/Quickstart
        可为每个方法添加不同的参数来参数化

4.（待解决）WebView无限等待异常未解决
已尝试多种IdingResource 方式无效 , 待debug跟踪问题的原因
    解决方式:
        1. debug 找出原因 , 彻底解决webview的问题
        2. 采用等待activity的方式,实现web资源的加载（有一定的不确定性）
    采用:
        目前采用方式 2 > 后期如有需要或技术问题解决, 将采用方式 1 （标记为待解决）

5. 获取user data 的问题: 如果是通过方法传参将无法获得形参的name
    解决方式:
        1. 使用asm解决 ( 专业的字节码操作框架 ) http://asm.ow2.org/download/index.html
        2. 使用Spring-webmvc解决 这里面也含有一套捞取形参名的框架 ( java1.8可以通过反射 , 1.8一下也是通过操作字节码实现 )
        3. 使用硬编码 , 在每个测试开始时手动将useData 以键值对的形成 传递.
    采用:
        ------否决------ 通过时间对比 (使用相同的类,方法 .asm耗时 23ms , spring耗时 37ms) 故采用asm , 虽然实现起来较为麻烦,但封装好之后一样方便.
        由于在Android环境无法获取到具体的class文件 , 只有apk文件
        ------废弃-------故采用方式3
        (new) 更改源码拿到当前使用的形参值 , 通过参数注解拿到形参名 , 封装解决.

6.  (完成)（已解决）遗留问题:每个Test方法都需要最后通知BaseTest 成功 , 否则都会保留截图
    解决方式:
        当前没有好的解决方式.
    采用:
        将BaseTest 中After的内容分布到 TestWatcherAdvance中的failed 和 finish 中去完成 , 构造方法增加BaseTest的形参.

7.  (待解决)BeforeClass / AfterClass 和 ClassRule 协调的问题
    问题:
        ClassRule中启动起来的activity 在之后无法使用  , 然Rule中启动的activity也无法在BeforeClass / AfterClass中使用 .
    解决方案:
        1.

8.  (待解决)通过反射获取ViewInteraction对象 , 实现循环遍历

9.  toast 匹配出现问题 , 错误的toast可成功匹配

10/19   expect 直接写文本/toast消息/...   不单独判断 ; expect 不再使用元素(View)
11/04   expect 使用Element ; toast消息集中放置于ToastInfo 中; 若本来就是检查元素则写在当前类中 ;
11/14   UiDevice 写入环境常量 ; 经测试可正常截图 ;
11/17   今天之前已将useData的写入方式 更改为,注解形参的方式获取形参名 , 修改插件源码实现data获取;
        今天添加field 定义data的实现 , 需使用FieldVar 注解
11/22   添加 UNCALIBRATED 类型的TestResult;  使用时直接在Test方法中set即可 .
        ->  改为使用注解 Uncalibrated 来标明该方法需要人为判断.

2017年历 ||

05/15   之前改版后退出再次进入会保留退出前所在的位置 , 故后期在判断一些东西的时候需注意(如登录,开户等)
05/18   改变check的异常捕获方式 Error -> NoMatchingViewException . 由于 Error 捕获不到
05/23   使用jdk1.8 编译问题:
        使用插件 apply plugin: 'me.tatarka.retrolambda'   -> 由于地域问题或是别的原因 加载不到该jar包 , 将无法使用
        使用 jack : android { …….  defaultConfig {    jackOptions {        enabled true    }  }} 并启用jkd1.8 , 编译是成功的 , Run的时候出现问题(各种异常)
        故 :
            取消使用 jdk 1.8 更改初始化map时 使用了变量的代码
05/27   1. 将case逐步分化 , 一条用例无需太多的关注点 , 将一些常用的关注点分化出去, 如分给default show ,xxx page show
        2. action也需分化 , 确保每个action的独立性 , 逻辑性的东西在case中去组织吧
05/27--(作废)--   这是一个以前的变更, 没有做记录,这里说明一下:
        反向验证可使用 fail(..)方法 , 如:
        try {
            onData(withRowString(watchlistKey, name)).check(matches(isDisplayed()));
            fail(String.format("the item \"%s\" has been deleted .", name));
        } catch (Exception e) {}
        代码大意 : 尝试检查该元素是否可见 , 若可见则使用 fail 抛出异常
        作废代替: 可是用在check的时候使用 not(...) , 如: .check(matches(not(isDisplayed())));

06/02   将需要使用小数的地方用 BigDecimal 类型 , 不使用float 或者 double类型 ( 特殊情况除外 ) , 实例化使用 String
            如: BigDecimal bd = new BigDecimal("1.2345");
06/09   作废05/27的写法 , 需要断言元素不可见 只需要使用 ViewAssertion doesNotExist() 即可
        示例: given(tv.restOfDay).check(doesNotExist());
07/04   在使用参数化时 , 不建议都是用方法来参数化
        使用注解 @Parameters 直接参数化则直接参数化 , 且可以过滤前后多余空格;
07/05   不再需要为同id能匹配多个元素而担心了 , 相同 id 的元素在当前布局可视状态之会存在一个
        so , 只需要在匹配的时候加入 isDisplayed() 即可.
        这样还方便了元素的复用 , 无需使用多余的堂兄, 叔父等方式匹配了.
07/07   简化参数化测试 , 非变动参数直接使用 成员变量